from typing import Dict, List, Set

from .cfginterpreter import CFGInterpreter
from .cfgtransitiontable import TransitionTable
from ..converter.logger import Log

from .cfgfollowset import FollowSet
from .cfglexer import CFGLexer
from .cfgfirstset import FirstSet
from .dataclasses import RuleSet, Token


class CFGConverter:
    def __init__(self, input_grammar: Dict[str, List[str]], debug_prints=True):
        self.__logger = Log(class_name="CFGConverter")
        self.__debug_prints = debug_prints
        self.input_grammar = input_grammar

    @staticmethod
    def __debugging_2(interpreter: CFGInterpreter):
        print("#" * 20)
        interpreter.debug_print()

        print("#" * 20)
        for struct in interpreter.structs:
            print(struct.get_code())

    def convert(self) -> str:
        # 1. Step: Run the lexer and get all tokens in a usable format.
        lexer = CFGLexer(self.input_grammar)
        grammar: Dict[str, RuleSet] = lexer.get_grammar()
        symbols: Set[Token] = lexer.get_symbols()

        # 2. Step: Generate First and Follow Sets
        firstSet = FirstSet(grammar, symbols)
        firstSet.generate()

        # print("#" * 10)
        # print("a<Baa>aa", ",".join(x.name for x in firstSet.get(lexer.convert_string("a<Baa>aa"))))
        # print("<Baa>aa", ",".join(x.name for x in firstSet.get(lexer.convert_string("<Baa>aa"))))
        # print("#"*10)
        # print("b<Bba>ba", ",".join(x.name for x in firstSet.get(lexer.convert_string("b<Bba>ba"))))
        # print("<Bba>ba", ",".join(x.name for x in firstSet.get(lexer.convert_string("<Bba>ba"))))
        # print("#" * 10)

        followSet = FollowSet(grammar, firstSet, symbols)
        followSet.generate()

        # 3. Step: Generate Transition Table
        transitionTable = TransitionTable(grammar, lexer.get_terminals(), firstSet, followSet)

        # 4. Combine all information
        interpreter = CFGInterpreter(firstSet, followSet, transitionTable, lexer.get_token_length(), self.__debug_prints)
        interpreter.interpret()

        start_string = lexer.convert_string("<start>")
        code: str = interpreter.get_code(firstSet.get(start_string))
        first_print = firstSet.to_printable()
        follow_print = followSet.to_printable()

        file_content = "// This is autogenerated code by Norman Ziebal\n\n"
        if self.__debug_prints:
            file_content += first_print
            file_content += "\n"
            file_content += follow_print
            file_content += "\n"
        file_content += code

        #s = ""
        #for terminal in lexer.get_terminals():
        #    s += '"' + terminal.name.rstrip("@") + '",'
        #print(s)

        return file_content





